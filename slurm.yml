
- name: Install slurm baseline
  become: true
  hosts: slurmworker:slurmcontroller
  tasks:
    - name: Ensure slurm and munge are installed
      ansible.builtin.dnf:
        name:
        - munge
        - munge-libs
        - munge-devel
        - slurm
        - slurm-slurmd
        - slurm-slurmctld
        - slurm-devel
        - slurm-contribs
        - slurm-doc
    - name: Copy munge key to compute and controller hosts
      ansible.builtin.copy:
        src: munge.key
        dest: /etc/munge/munge.key
        owner: munge
        group: munge
        mode: '0400'
    - name: Ensure munge is enabled at boot
      ansible.builtin.systemd_service:
        name: munge
        enabled: true
        state: started
    - name: Add /etc/slurm directory
      ansible.builtin.file:
        path: /etc/slurm
        state: directory
        owner: root
        group: root
        mode: "0755"
    - name: Allow slurm to write in /var/spool/slurm
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: slurm
        group: slurm
        mode: "0755"
      loop:
       - /var/spool/slurm
       - /var/spool/slurm/d
       - /var/spool/slurm/ctld
    - name: Copy slurm config to hosts
      ansible.builtin.copy:
        src: slurm.conf
        dest: /etc/slurm/slurm.conf
        owner: root
        group: root
        mode: '0644'
      register: slurmconf
    - name: Copy gres config to hosts
      ansible.builtin.copy:
        src: gres.conf
        dest: /etc/slurm/gres.conf
        owner: root
        group: root
        mode: '0644'
      register: gresconf
    - name: Permit traffic for srun
      ansible.posix.firewalld:
        port: "6900-6999/tcp"
        zone: public
        permanent: true
        immediate: true
        state: enabled

- name: Ensure slurm control services are running
  become: true
  hosts: slurmcontroller
  tasks:
    - name: Ensure slurmctld is enabled at boot
      ansible.builtin.systemd_service:
        name: slurmctld
        enabled: true
        state: started
    - name: Restart slurmctld
      ansible.builtin.systemd_service:
        name: slurmctld
        enabled: true
        state: restarted
      when: slurmconf.changed or gresconf.changed
    - name: Permit traffic for slurmctld
      ansible.posix.firewalld:
        port: "6817/tcp"
        zone: public
        permanent: true
        immediate: true
        state: enabled

- name: Ensure slurm worker services are running
  become: true
  hosts: slurmworker
  tasks:
    - name: Ensure slurmd is enabled at boot
      ansible.builtin.systemd_service:
        name: slurmd
        enabled: true
        state: started
    - name: Restart slurmd
      ansible.builtin.systemd_service:
        name: slurmd
        enabled: true
        state: restarted
      when: slurmconf.changed or gresconf.changed
    - name: Permit traffic for slurmd
      ansible.posix.firewalld:
        port: "6818/tcp"
        zone: public
        permanent: true
        immediate: true
        state: enabled

- name: Install enroot
  hosts: slurmworker
  become: yes
  tasks:
    - name: Install dependencies
      ansible.builtin.dnf:
        name:
        - git
        - gcc
        - make
        - libcap
        - libtool
        - automake
        - libmd-devel
        - jq
        - squashfs-tools
        - parallel
        - fuse-overlayfs
        - libnvidia-container-tools
        - pigz
        - squashfuse
        - rpmlint
    - name: Install enroot
      ansible.builtin.dnf:
        name:
        - https://github.com/NVIDIA/enroot/releases/download/v3.5.0/enroot-3.5.0-1.el8.x86_64.rpm
        - https://github.com/NVIDIA/enroot/releases/download/v3.5.0/enroot+caps-3.5.0-1.el8.x86_64.rpm
        disable_gpg_check: true

    - name: check if kernel unpriv enabled
      ansible.builtin.shell: "cat /proc/cmdline | grep 'namespace.unpriv_enable=1'"
      register: kernel_unpriv_enable
      failed_when: kernel_unpriv_enable.rc == 127
      changed_when: kernel_unpriv_enable.rc == 1

    - name: check if user namespaces enabled
      ansible.builtin.shell: "cat /proc/cmdline | grep 'user_namespace.enable=1'"
      register: kernel_user_namespace
      failed_when: kernel_user_namespace.rc == 127
      changed_when: kernel_user_namespace.rc == 1

    - name: install grubby if needed
      ansible.builtin.dnf:
        name: "grubby"
        state: "present"
      when: ((kernel_unpriv_enable.rc == 1) or (kernel_user_namespace.rc == 1))

    - name: add kernel options to use enroot
      ansible.builtin.command: "grubby --update-kernel=ALL --args={{ item }}"
      when: ((kernel_unpriv_enable.rc == 1) or (kernel_user_namespace.rc == 1))
      with_items:
        - "namespace.unpriv_enable=1"
        - "user_namespace.enable=1"
      notify:
      - reboot node
  handlers:
      - name: reboot node
        ansible.builtin.reboot:
            msg: "Reboot initiated by Ansible after enroot installation"

    # # These are optional
    # - name: set max_user_namespaces
    #   sysctl:
    #     name: user.max_user_namespaces
    #     value: "{{ enroot_max_user_namespaces }}"
    #     state: present

    # - name: set max_mnt_namespaces
    #   sysctl:
    #     name: user.max_mnt_namespaces
    #     value: "{{ enroot_max_mnt_namespaces }}"
    #     state: present


- name: Install pyxis
  hosts: slurmworker
  become: yes
  tasks:
    - name: Install dependencies
      ansible.builtin.dnf:
        name: util-linux

    - name: install slurm-pmi hook
      ansible.builtin.file:
        path: /etc/enroot/hooks.d/50-slurm-pmi.sh
        state: link
        src: /usr/share/enroot/hooks.d/50-slurm-pmi.sh

    - name: install slurm-pytorch hook
      ansible.builtin.file:
        path: /etc/enroot/hooks.d/50-slurm-pytorch.sh
        state: link
        src: /usr/share/enroot/hooks.d/50-slurm-pytorch.sh

    - name: create pyxis source dir
      ansible.builtin.file:
        path: /usr/local/src/pyxis
        state: directory
        mode: "0755"

    - name: copy pyxis source
      ansible.builtin.unarchive:
        src: "https://github.com/NVIDIA/pyxis/archive/refs/tags/v0.19.0.tar.gz"
        remote_src: yes
        dest: /usr/local/src/pyxis
        extra_opts:
          - --strip-components=1

    - name: clean pyxis source directory
      ansible.builtin.command:
        chdir: /usr/local/src/pyxis
        argv:
          - make
          - clean
      register: pyxis_make_clean
      failed_when: false
      changed_when: pyxis_make_clean.rc == 0

    - name: build pyxis
      ansible.builtin.command:
        chdir: /usr/local/src/pyxis
        argv:
          - make
          - -j
      environment:
        CPPFLAGS: "-I /usr/include/slurm"
      register: result
      changed_when: "result.stdout != \"make: Nothing to be done for 'all'.\""
      notify:
        - restart slurmctld
        - restart slurmd

    # Needed for 17.11, but not for 19.05. Doesn't hurt either way.
    - name: copy top-level plugstack file
      ansible.builtin.copy:
        src: plugstack.conf
        dest: "/etc/slurm/"
        mode: "0644"
      notify:
        - restart slurmctld
        - restart slurmd

    - name: copy pyxis plugstack file
      ansible.builtin.copy:
        src: pyxis.conf
        dest: "/etc/slurm/plugstack.conf.d/"
        mode: "0644"
      notify:
        - restart slurmctld
        - restart slurmd

    - name: set pyxis shared-object permissions
      ansible.builtin.file:
        path: "/usr/local/src/pyxis/spank_pyxis.so"
        mode: 0755
  handlers:
      - name: restart slurmd
        ansible.builtin.systemd_service:
          name: slurmd
          state: restarted
      - name: restart slurmctld
        ansible.builtin.systemd_service:
          name: slurmctld
          state: restarted